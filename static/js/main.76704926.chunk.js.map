{"version":3,"sources":["gameOfLife.js","util.js","App.js","serviceWorker.js","index.js"],"names":["require","initialGrid","generateWorld","generateNextWorld","getAliveCellsOfNextGeneration","filterInputs","cellCoordinates","getDimension","module","exports","nextGeneration","currGeneration","bounds","topLeft","_getDimension","height","width","filteredCurrentGeneration","filter","x","map","cell","grid","nextWorld","returnGrid","_getDimension2","horizontalCharacter","String","fromCharCode","verticalCharacter","isCoordinatesGreaterThanBoard","boardSize","checkRangeForNegativeNumbers","cartesian","set1","set2","resultSet","rowIndex","length","columnIndex","push","validNeighbors","possibleNeighbors","size","neighbour","predicate","checkGreaterThanBoard","bind","findingNeighbors","rowCoordinates","coloumnCoordinates","checkForAlive","totalAliveNeighbors","neighbors","isAlive","getCoordinates","initial","result","index","bottomRight","createRow","array","currRow","row","column","addSpaces","join","dashline","filler","Array","fill","text","undefined","aliveCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","aliveCell","value","err","return","initialWorld","slice","i","noOfAliveNeighbours","nextState","colomnIndex","rowCoordinate","columnCoordinate","list","some","element","result1","every","includes","result2","printBoard","board","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","generation","Grid","e","target","style","backgroundColor","addToGeneration","JSON","parse","id","column_id","react_default","a","createElement","App_TableColumn","key","onClick","placeLiveCell","App_TableRow","createTableColumn","createInitialGrid","createTableRow","columns","document","getElementsByTagName","resetGrid","currentGeneration","setState","forEach","getElementById","stringify","setInterval","renderGeneration","window","location","reload","className","createTable","startGame","restartGame","Component","TableRow","TableColumn","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76704926.chunk.js","sourcesContent":["const {\n  initialGrid,\n  generateWorld,\n  generateNextWorld,\n  getAliveCellsOfNextGeneration,\n  filterInputs,\n  cellCoordinates,\n  getDimension\n} = require(\"./util.js\");\n\nconst nextGeneration = function(currGeneration, bounds) {\n  let { topLeft } = bounds;\n  let { height, width } = getDimension(bounds);\n  let filteredCurrentGeneration = currGeneration.filter(x =>\n    filterInputs(x, cellCoordinates(bounds))\n  );\n  filteredCurrentGeneration = filteredCurrentGeneration.map(cell => [\n    cell[0] - topLeft[0],\n    cell[1] - topLeft[1]\n  ]);\n  let grid = generateWorld(\n    initialGrid(width, height),\n    filteredCurrentGeneration\n  );\n  let nextWorld = generateNextWorld(grid);\n  return getAliveCellsOfNextGeneration(nextWorld, height, width).map(cell => [\n    cell[0] + topLeft[0],\n    cell[1] + topLeft[1]\n  ]);\n};\n\nconst returnGrid = function(currGeneration, bounds) {\n  let { topLeft } = bounds;\n  let { height, width } = getDimension(bounds);\n  let filteredCurrentGeneration = currGeneration.filter(x =>\n    filterInputs(x, cellCoordinates(bounds))\n  );\n  filteredCurrentGeneration = filteredCurrentGeneration.map(cell => [\n    cell[0] - topLeft[0],\n    cell[1] - topLeft[1]\n  ]);\n  let grid = generateWorld(\n    initialGrid(width, height),\n    filteredCurrentGeneration\n  );\n  let nextWorld = generateNextWorld(grid);\n  return nextWorld;\n};\n\nmodule.exports = { nextGeneration, returnGrid };\n","let horizontalCharacter = String.fromCharCode(9473);\nlet verticalCharacter = String.fromCharCode(9475);\n\nconst initialGrid = function(height, width) {\n  let grid = new Array(width).fill(height).map(x => new Array(x).fill(\" \"));\n  return grid;\n};\n\nconst isCoordinatesGreaterThanBoard = function(boardSize, cell) {\n  return cell[0] < boardSize[0] && cell[1] < boardSize[1];\n};\n\nconst generateWorld = function(grid, aliveCells) {\n  for (let aliveCell of aliveCells) {\n    grid[aliveCell[0]][aliveCell[1]] = \"*\";\n  }\n  return grid;\n};\n\nconst predicate = function(cell, neighbour) {\n  return !(cell[0] === neighbour[0] && cell[1] === neighbour[1]);\n};\n\nconst checkRangeForNegativeNumbers = function(cell) {\n  return cell[0] >= 0 && cell[1] >= 0;\n};\n\nconst cartesian = function(set1, set2) {\n  let resultSet = [];\n  for (let rowIndex = 0; rowIndex < set1.length; rowIndex++) {\n    for (let columnIndex = 0; columnIndex < set2.length; columnIndex++) {\n      resultSet.push([set1[rowIndex], set2[columnIndex]]);\n    }\n  }\n  return resultSet;\n};\n\nconst validNeighbors = function(possibleNeighbors, cell, size) {\n  let validNeighbors = possibleNeighbors.filter(neighbour =>\n    predicate(cell, neighbour)\n  );\n  validNeighbors = validNeighbors.filter(checkRangeForNegativeNumbers);\n  let checkGreaterThanBoard = isCoordinatesGreaterThanBoard.bind(null, size);\n  validNeighbors = validNeighbors.filter(checkGreaterThanBoard);\n  return validNeighbors;\n};\n\nconst findingNeighbors = function(size, cell) {\n  let rowCoordinates = [cell[0] - 1, cell[0], cell[0] + 1];\n  let coloumnCoordinates = [cell[1] - 1, cell[1], cell[1] + 1];\n  let possibleNeighbors = cartesian(rowCoordinates, coloumnCoordinates);\n  let neighbors = validNeighbors(possibleNeighbors, cell, size);\n  return neighbors;\n};\n\nconst checkForAlive = function(grid, neighbour) {\n  return grid[neighbour[0]][neighbour[1]] === \"*\";\n};\n\nconst totalAliveNeighbors = function(cell, grid) {\n  let neighbors = findingNeighbors([grid.length, grid[0].length], cell);\n  let isAlive = checkForAlive.bind(null, grid);\n  let aliveNeighbor = neighbors.filter(isAlive);\n  return aliveNeighbor.length;\n};\n\nconst checkForNextGenration = function(currentCellState, neighbourLength) {\n  let rules = [\" \", \" \", currentCellState, \"*\", \" \", \" \", \" \", \" \", \" \"];\n  return rules[neighbourLength];\n};\n\nconst generateNextWorld = function(initialWorld) {\n  let nextWorld = initialWorld.map(x => x.slice());\n  for (let index = 0; index < initialWorld.length; index++) {\n    for (let i = 0; i < initialWorld[0].length; i++) {\n      let noOfAliveNeighbours = totalAliveNeighbors([index, i], initialWorld);\n      let nextState = checkForNextGenration(\n        initialWorld[index][i],\n        noOfAliveNeighbours\n      );\n      nextWorld[index][i] = nextState;\n    }\n  }\n  return nextWorld;\n};\n\nconst getAliveCellsOfNextGeneration = function(nextWorld, width, height) {\n  let result = [];\n  for (let rowIndex = 0; rowIndex < width; rowIndex++) {\n    for (let colomnIndex = 0; colomnIndex < height; colomnIndex++) {\n      if (nextWorld[rowIndex][colomnIndex] === \"*\") {\n        result.push([rowIndex, colomnIndex]);\n      }\n    }\n  }\n  return result;\n};\n\nconst getCoordinates = function(length, initial) {\n  let result = [];\n  for (let index = 0; index < length; index++) {\n    result.push(initial);\n    initial += 1;\n  }\n  return result;\n};\n\nconst filterInputs = function(array, list) {\n  return list.some(element => {\n    let result1 = element.every(x => array.includes(x));\n    let result2 = array.every(x => element.includes(x));\n    return result1 && result2;\n  });\n};\n\nconst cellCoordinates = function(bounds) {\n  let { height, width } = getDimension(bounds);\n  let rowCoordinate = getCoordinates(height, bounds.topLeft[0]);\n  let columnCoordinate = getCoordinates(width, bounds.topLeft[1]);\n  let result = cartesian(rowCoordinate, columnCoordinate);\n  return result;\n};\n\nconst getDimension = function(bounds) {\n  return {\n    height: bounds.bottomRight[0] - bounds.topLeft[0] + 1,\n    width: bounds.bottomRight[1] - bounds.topLeft[1] + 1\n  };\n};\n\nconst printBoard = function(array) {\n  let board = [];\n  let length = array[0].length;\n  if (array[0].length === 0) {\n    return [\"\"];\n  }\n  board = board.concat(dashline(length));\n  for (let row = 0; row < array.length; row++) {\n    board = board.concat(createRow(array[row], row));\n  }\n  return board.concat(dashline(length));\n};\n\nconst fillConsecutiveNumbersArray = function(limit) {\n  let array = [];\n  for (let index = 0; index < limit; index++) {\n    array.push(index);\n  }\n  return array;\n};\n\nconst fillArray = function(filler) {\n  return function(length) {\n    return new Array(length).fill(filler);\n  };\n};\n\nconst xAxis = function(length) {\n  let axis = fillConsecutiveNumbersArray(length)\n    .map(addSpaces)\n    .join(verticalCharacter);\n  axis = [verticalCharacter + axis + verticalCharacter];\n  axis = axis.concat(dashline(length));\n  return axis;\n};\n\nconst createRow = function(array, currRow) {\n  let row = [];\n  let column = array.map(addSpaces).join(verticalCharacter);\n  let cell = verticalCharacter + column + verticalCharacter;\n  row.push(cell);\n  return row;\n};\n\nconst dashline = function(length) {\n  if (length === 0) {\n    return \"\";\n  }\n  return fillArray(horizontalCharacter)(length * 4 + 1).join(\"\");\n};\n\nconst addSpaces = function(text) {\n  if (text != undefined) {\n    return \" \" + text + \" \";\n  }\n  return \"\";\n};\n\nmodule.exports = {\n  initialGrid,\n  isCoordinatesGreaterThanBoard,\n  generateWorld,\n  cartesian,\n  validNeighbors,\n  findingNeighbors,\n  checkForAlive,\n  totalAliveNeighbors,\n  generateNextWorld,\n  getAliveCellsOfNextGeneration,\n  cellCoordinates,\n  getDimension,\n  filterInputs,\n  printBoard\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nconst { nextGeneration, returnGrid } = require(\"./gameOfLife\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bounds: { topLeft: [0, 0], bottomRight: [30, 70] },\n      generation: [],\n      Grid: []\n    };\n  }\n\n  createInitialGrid() {\n    return new Array(30).fill(new Array(70).fill(\" \"));\n  }\n\n  addToGeneration(element) {\n    this.state.generation.push(element);\n  }\n\n  placeLiveCell(e) {\n    let element = e.target;\n    element.style.backgroundColor = \"black\";\n    this.addToGeneration(JSON.parse(element.id));\n  }\n\n  createTableColumn(id, column, index) {\n    let column_id = `[${id},${index}]`;\n    return (\n      <TableColumn\n        id={column_id}\n        key={index}\n        value={column}\n        onClick={this.placeLiveCell.bind(this)}\n      />\n    );\n  }\n\n  createTableRow(row, index) {\n    return (\n      <TableRow\n        id={index}\n        key={index}\n        value={row.map(this.createTableColumn.bind(this, index))}\n      />\n    );\n  }\n\n  createTable() {\n    let initialGrid = this.createInitialGrid();\n    let grid = initialGrid.map(this.createTableRow.bind(this));\n    return grid;\n  }\n\n  resetGrid() {\n    let columns = document.getElementsByTagName(\"td\");\n    for (let i = 0; i < columns.length; i++) {\n      columns[i].style.backgroundColor = \"#B3A8A6\";\n    }\n  }\n\n  renderGeneration() {\n    this.resetGrid();\n    let grid = returnGrid(this.state.generation, this.state.bounds);\n    let currentGeneration = nextGeneration(\n      this.state.generation,\n      this.state.bounds\n    );\n\n    this.setState({\n      grid: grid,\n      generation: currentGeneration\n    });\n\n    currentGeneration.forEach(element => {\n      let liveCell = document.getElementById(JSON.stringify(element));\n      liveCell.style.backgroundColor = \"black\";\n    });\n    return;\n  }\n\n  renderGrid() {\n    return this.state.grid.map(this.createTableRow.bind(this));\n  }\n\n  startGame() {\n    setInterval(this.renderGeneration.bind(this), 500);\n  }\n\n  restartGame() {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"caption\">GAME OF LIFE</div>\n        <div className=\"App\">\n          <table className=\"gol-grid\" id=\"gol-grid\">\n            <tbody>{this.createTable()}</tbody>\n          </table>\n          <div className=\"button\">\n            <button onClick={this.startGame.bind(this)}>Start Game</button>\n            <button onClick={this.restartGame.bind(this)}>Restart Game</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass TableRow extends Component {\n  render() {\n    return <tr id={this.props.id}>{this.props.value}</tr>;\n  }\n}\n\nclass TableColumn extends Component {\n  render() {\n    return (\n      <td id={this.props.id} onClick={this.props.onClick}>\n        {this.props.value}\n      </td>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}